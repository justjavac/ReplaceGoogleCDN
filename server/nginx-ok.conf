
#user  nobody;
user  nginx;
worker_processes  auto;
# 充分利用多核
worker_cpu_affinity auto;


error_log  /var/log/nginx/error.log info;
#access_log  /var/log/nginx/access.log
pid        /var/run/nginx.pid;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  10240;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  ' $remote_addr - $remote_user [$time_local] "$request" '
                      ' $status $body_bytes_sent "$http_referer" '
                      ' "$http_user_agent" "$http_x_forwarded_for" '
                      ' host:"$host"            des_host:"$custom_des_host" '
                      ' origin:"$http_origin"   des_origin:"$custom_des_origin" '
                      ' referer:"$http_referer" des_referer:"$custom_des_referer" '
                      ' custom_cdn_host:"$custom_cdn_host" ';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;


    gzip  on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 4 16k;
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json image/png image/gif image/jpeg;
    server_tokens off;
    resolver  1.1.1.1 ipv6=off;

    proxy_buffer_size  128k;
    proxy_buffers   32 32k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    client_body_buffer_size 1024k;
    server_names_hash_bucket_size 128;
    map_hash_bucket_size 256;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    map $host $my_suffix_domain {
        default proxy.domain.com ;
    }
    # 将 domain.com  更换成为你自己的域名, 域名解析需要支持泛域名
    # _xn--3px_仅仅是分隔符号，可以自己定义
    map $host $custom_des_host {
         default $host ;
         ~^1_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com$ $1.$2;
         ~^2_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_(\w+?)\.proxy\.\w+?.com$ $1.$2.$3;
         ~^3_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com$ $1.$2.$3.$4;
         ~^4_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com$ $1.$2.$3.$4.$5;
         ~^5_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com$ $1.$2.$3.$4.$5.$6.$5.$6;
    }
    # 定制referer
    map $http_referer $custom_des_referer {
        default $http_origin ;
        ~^(http|https)://1_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3/$4 ;
        ~^(http|https)://2_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_(\w+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4/$5 ;
        ~^(http|https)://3_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5/$6 ;
        ~^(http|https)://4_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5.$6/$7 ;
        ~^(http|https)://5_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5.$6.$7/$8 ;

    }
    # 定制origin
    map $http_referer $custom_des_origin {
        default $http_origin ;
        ~^(http|https)://1_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3/$4 ;
        ~^(http|https)://2_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_(\w+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4/$5 ;
        ~^(http|https)://3_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5/$6 ;
        ~^(http|https)://4_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5.$6/$7 ;
        ~^(http|https)://5_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)_xn--3px_([\w|-]+?)\.proxy\.\w+?.com/(.*)$ $1://$2.$3.$4.$5.$6.$7/$8 ;

    }

    server {
        listen  443 ssl http2 default_server;
        listen  [::]:443 ssl http2 default_server;
        # 将 domain.com  更换成为你自己的域名, 域名解析需要支持泛域名 *.proxy.domain.com
        server_name   ~^(?<subdomain>.+)\.proxy\.domain.com$;

        charset utf-8;

        # access_log  logs/access.log  main;

        # SSL Configuration 配置例子参考  https://ssl-config.mozilla.org/#server=nginx

        ssl_certificate     /tls/wildcard.domain.com.fullchain.pem;
        ssl_certificate_key /tls/wildcard.domain.com.key.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_protocols  TLSv1.3;
        ssl_prefer_server_ciphers off;

        # let's encrypt免费证书
        # https://letsencrypt.org/
        # https://github.com/acmesh-official/acme.sh.git

        resolver  1.1.1.1  ; # dns 解析


        # nginx support connect method
        # 参考 https://github.com/chobits/ngx_http_proxy_connect_module.git
        # 用于SSL请求隧道。
        # http://tengine.taobao.org/document_cn/proxy_connect_cn.html

        # proxy_connect;
        # #  proxy_connect_allow            443 80; #只允许443  80端口
        # proxy_connect_allow            all;  #允许所有端口
        # proxy_connect_connect_timeout  10s;
        # proxy_connect_read_timeout     10s;
        # proxy_connect_send_timeout     10s;

        # 简单cookie权限验证，cookie 必需存在才能用
        # 存在意义，阻止滥用
        # token=$(cat /proc/sys/kernel/random/uuid)

        # if ( $cookie_proxy_token != "883bedeb-82a9-4ba6-9383-693eeb453bca") {
        #     return 401 '{"status":"401","result":"您没有权限,请联系管理员","message":"unauthorized"}';
        # }

        include conf.d/custom-proxy-header.item;
        location / {

            proxy_pass "$scheme://$custom_des_host$request_uri";

            proxy_set_header Host    $custom_des_host;
            proxy_set_header Referer $custom_des_referer;
            proxy_set_header Origin $custom_des_origin;

            proxy_ignore_headers "Set-Cookie";
            include conf.d/hidden_proxy_headers.item;

            proxy_read_timeout 30s;
            proxy_send_timeout 30s;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection  $connection_upgrade;
            proxy_set_header        Cookie "";
            proxy_ssl_protocols  TLSv1.2 TLSv1.3;
            proxy_ssl_session_reuse off;
            proxy_ssl_server_name on ;

        }
    }

    #指定域名
    map $host $custom_replace_cdn_host {
        default '' ;
        ajax-googleapis-com.proxy.domain.com  ajax.googleapis.com;
        fonts-googleapis-com.proxy.domain.com            fonts.googleapis.com;
        themes-googleusercontent-com.proxy.domain.com    themes.googleusercontent.com;
        fonts-gstatic-com.proxy.domain.com               fonts.gstatic.com;
        ssl-gstatic-com.proxy.domain.com                 ssl.gstatic.com;
        www-gstatic-com.proxy.domain.com                 www.gstatic.com;
        secure-gravatar-com.proxy.domain.com             secure.gravatar.com;
        maxcdn-bootstrapcdn-com.proxy.domain.com         maxcdn.bootstrapcdn.com;
    }

    server {
        listen       443 ssl http2;
        listen  [::]:443 ssl http2;
        ssl_certificate     /tls/wildcard.domain.com.fullchain.pem;
        ssl_certificate_key /tls/wildcard.domain.com.key.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_protocols  TLSv1.3;
        ssl_prefer_server_ciphers off;

        set $suffix_domain ".proxy.domain.com";
        server_name
                    ajax-googleapis-com.proxy.domain.com
                    fonts-googleapis-com.proxy.domain.com
                    themes-googleusercontent-com.proxy.domain.com
                    fonts-gstatic-com.proxy.domain.com
                    ssl-gstatic-com.proxy.domain.com
                    www-gstatic-com.proxy.domain.com
                    secure-gravatar-com.proxy.domain.com
                    maxcdn-bootstrapcdn-com.proxy.domain.com
        ;

        # 获得要替换的地址方法一：使用map; 方法二：使用if 如下例子;
        set $custom_cdn_host '';
        if ( $host = "ajax-googleapis-com$suffix_domain" ) {
            set $custom_cdn_host   'ajax.googleapis.com';
        }

        if ( $custom_replace_cdn_host = '')
        {
                 return 444; #  CONNECTION CLOSED WITHOUT RESPONSE
        }

         location =/robots.txt {
                 default_type text/plain;
                 add_header Content-Type "text/plain; charset=UTF-8";
                 return 200 "User-Agent: *\nDisallow: /";
         }


        charset utf-8;
        root /usr/share/nginx/html;

        include conf.d/custom-proxy-header.item;

        location / {
            proxy_pass "https://$custom_replace_cdn_host$request_uri";
            proxy_set_header Host    $custom_replace_cdn_host;
            proxy_set_header Referer '';
            proxy_set_header Origin '';

            proxy_ignore_headers "Set-Cookie";
            include conf.d/hidden_proxy_headers.item;

            proxy_read_timeout 30s;
            proxy_send_timeout 30s;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection  $connection_upgrade;
            proxy_set_header        Cookie "";
            proxy_ssl_protocols  TLSv1.2 TLSv1.3;
            proxy_ssl_session_reuse off;
            proxy_ssl_server_name on ;
        }
    }

    server {
        listen  80 default_server;
        listen  [::]:80  default_server;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }



}
